// üìã –û–ü–ò–°–ê–ù–ò–ï: –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
// üîß –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –ó–∞–º–µ–Ω–∞ Base64 –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ API

import { useState } from 'react';
import { uploadApi } from '@/shared/api/real'; // ‚Üê –ò–ó–ú–ï–ù–ò–¢–¨ –∏–º–ø–æ—Ä—Ç

export const useVideoUpload = () => {
  const [videoUrl, setVideoUrl] = useState<string>('');
  const [thumbnailUrl, setThumbnailUrl] = useState<string>('');
  const [uploadProgress, setUploadProgress] = useState(0);
  const [isUploading, setIsUploading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const uploadVideo = async (file: File): Promise<boolean> => {
    try {
      setIsUploading(true);
      setUploadProgress(0);
      setError(null);

      // üéØ –†–ï–ê–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –≤–∏–¥–µ–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await uploadApi.uploadFile(file, 'video', (progress) => {
        setUploadProgress(progress);
      });

      setVideoUrl(response.url);
      setIsUploading(false);
      return true;
      
    } catch (err: any) {
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ');
      setIsUploading(false);
      return false;
    }
  };

  const uploadThumbnail = async (file: File): Promise<boolean> => {
    try {
      // üéØ –†–ï–ê–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê thumbnail –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await uploadApi.uploadFile(file, 'image');
      setThumbnailUrl(response.url);
      return true;
      
    } catch (err: any) {
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ thumbnail');
      return false;
    }
  };

  const removeVideo = async (): Promise<void> => {
    if (videoUrl) {
      try {
        await uploadApi.deleteFile(videoUrl);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ:', err);
      }
    }
    setVideoUrl('');
    setError(null);
  };

  const removeThumbnail = async (): Promise<void> => {
    if (thumbnailUrl) {
      try {
        await uploadApi.deleteFile(thumbnailUrl);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è thumbnail:', err);
      }
    }
    setThumbnailUrl('');
    setError(null);
  };

  return {
    videoUrl,
    thumbnailUrl,
    uploadProgress,
    isUploading,
    error,
    uploadVideo,
    uploadThumbnail,
    removeVideo,
    removeThumbnail,
    setVideoUrl,
    setThumbnailUrl
  };
};