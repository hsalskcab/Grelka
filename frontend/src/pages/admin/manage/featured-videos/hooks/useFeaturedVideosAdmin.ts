// üìã –û–ü–ò–°–ê–ù–ò–ï: –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏—á–µ—Ä–µ–¥ –≤–∏–¥–µ–æ –≤ –∞–¥–º–∏–Ω–∫–µ
// üîß –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –ó–∞–º–µ–Ω–∞ MockAPI –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ API

import { useState, useEffect } from 'react';
import { featuredApi, sellersApi } from '@/shared/api/real'; // ‚Üê –ò–ó–ú–ï–ù–ò–¢–¨ –∏–º–ø–æ—Ä—Ç
import { FeaturedVideo, Seller } from '@/shared/api/real/types'; // ‚Üê –ò–ó–ú–ï–ù–ò–¢–¨ –∏–º–ø–æ—Ä—Ç

export const useFeaturedVideosAdmin = () => {
  const [videos, setVideos] = useState<FeaturedVideo[]>([]);
  const [sellers, setSellers] = useState<Seller[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      // üéØ –†–ï–ê–õ–¨–ù–´–ï –ó–ê–ü–†–û–°–´
      const [videosData, sellersData] = await Promise.all([
        featuredApi.getFeaturedVideos(),
        sellersApi.getSellers()
      ]);
      
      setVideos(videosData);
      setSellers(sellersData);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const createVideo = async (videoData: any) => {
    try {
      // üéØ –†–ï–ê–õ–¨–ù–û–ï –°–û–ó–î–ê–ù–ò–ï
      await featuredApi.createFeaturedVideo(videoData);
      await fetchData(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      return { success: true };
    } catch (error: any) {
      return { 
        success: false, 
        error: error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ' 
      };
    }
  };

  const updateVideo = async (id: number, videoData: any) => {
    try {
      // üéØ –†–ï–ê–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
      await featuredApi.updateFeaturedVideo({ id, ...videoData });
      await fetchData(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      return { success: true };
    } catch (error: any) {
      return { 
        success: false, 
        error: error.response?.data?.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ' 
      };
    }
  };

  const deleteVideo = async (id: number) => {
    try {
      // üéØ –†–ï–ê–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï
      await featuredApi.deleteFeaturedVideo(id);
      await fetchData(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      return { success: true };
    } catch (error: any) {
      return { 
        success: false, 
        error: error.response?.data?.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ' 
      };
    }
  };

  return {
    videos,
    sellers,
    loading,
    error,
    createVideo,
    updateVideo,
    deleteVideo,
    refetch: fetchData
  };
};